{"ast":null,"code":"var _jsxFileName = \"/home/cees/code/labs/interviewProjects/stock-portfolio-app/stock-portfolio-app/src/components/Portfolio.js\";\nimport React, { useState } from 'react';\nimport Stock from './Stock';\nimport NavBar from './NavBar';\nimport '../css/portfolio.css';\nimport { APIKEY, SANDBOXURL, VERSION, BASEBACKENDURL } from '../constants';\n\nfunction Portfolio(props) {\n  const [ticker, setTicker] = useState(\"\"); // hook, ticker of stock\n\n  const [quantity, setQuantity] = useState(\"\"); // hook, amount of stocks\n\n  const [price, setPrice] = useState(\"\"); // hook, price of stock\n  // hooks to display error messages\n\n  const [validCash, setValidCash] = useState(true);\n  const [validAmount, setValidAmount] = useState(true);\n  const [validTicker, setValidTicker] = useState(true);\n\n  const handlePurchase = e => {\n    e.preventDefault();\n\n    if (!validTicker) {// check if ticker exists\n    } else if (enoughCash()) {\n      // check if theres enough cash for user to make the purchase\n      setValidCash(false);\n    } else if (checkQuantity()) {\n      // check whether the user typed in a valid amount\n      setValidAmount(false);\n    } else {\n      // passed the test, valid purchase\n      setValidCash(true);\n      setValidTicker(true);\n      buyStock();\n    }\n  };\n\n  const checkQuantity = () => {\n    return Number(quantity) < 0 || !Number.isInteger(Number(quantity));\n  };\n\n  const getLatestPrice = stock => {\n    fetch(SANDBOXURL + VERSION + `stock/${stock}/price?token=${APIKEY}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw response;\n    }).then(stockPrice => {\n      setValidTicker(true);\n      setPrice(stockPrice);\n    }).catch(error => {\n      // ticker does not exit  \n      setValidTicker(false);\n    });\n  };\n\n  const enoughCash = () => {\n    // check if user can afford the stocks with money in wallet\n    return price * quantity < props.user.cash;\n  };\n\n  const buyStock = () => {\n    const userInfo = {\n      \"email\": props.user.email\n    };\n    const stockInfo = {\n      \"ticker\": ticker,\n      \"quantity\": quantity,\n      \"price\": price\n    };\n    const transactionInfo = {\n      \"ticker\": ticker,\n      \"quantity\": quantity,\n      \"status\": \"BUY\",\n      \"price\": price\n    };\n    fetch(BASEBACKENDURL + 'buy-stocks/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        userInfo,\n        stockInfo,\n        transactionInfo\n      })\n    }).then(resp => resp.json()).then(data => {\n      console.log(data);\n    });\n  };\n\n  const renderOwnedStocks = () => {\n    let testing = [];\n\n    for (let i = 0; i < 10; ++i) {\n      testing.push(React.createElement(Stock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }));\n    }\n\n    return testing;\n  };\n\n  const convertNumToCurrencyFormat = price => {\n    return price.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    });\n  };\n\n  const findTicker = e => {\n    setTicker(e.target.value);\n    getLatestPrice(ticker);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, Object.keys(props.user).length !== 0 && // check if user is loggedIn\n  React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(NavBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(\"header\", {\n    className: \"portfolioHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \" Portfolio ($\", \") \"), React.createElement(\"div\", {\n    className: \"portfolioContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"stocksContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"stocksList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"portfolioDivider\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"purchaseContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    id: \"wallet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Cash - \", convertNumToCurrencyFormat(props.user.cash)), React.createElement(\"form\", {\n    className: \"purchaseForm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"purchaseField\",\n    type: \"text\",\n    placeholder: \"Ticker\",\n    value: ticker,\n    onChange: e => findTicker(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    className: \"purchaseField\",\n    type: \"text\",\n    placeholder: \"Qty\",\n    value: quantity,\n    onClick: e => setValidAmount(true),\n    onChange: e => setQuantity(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    className: \"purchaseField\",\n    type: \"text\",\n    placeholder: \"Price\",\n    value: price && quantity ? convertNumToCurrencyFormat(price * quantity) : \"\",\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), !validTicker && React.createElement(\"p\", {\n    className: \"purchaseErrorMessage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, ticker, \" is not valid \"), !validAmount && React.createElement(\"p\", {\n    className: \"purchaseErrorMessage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, quantity, \" is not a valid amount\"), !validCash && React.createElement(\"p\", {\n    className: \"purchaseErrorMessage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"not enough cash, \", quantity, \" stock(s) of \", ticker, \" cost \", convertNumToCurrencyFormat(price * quantity)), React.createElement(\"input\", {\n    className: \"purchaseButton\",\n    type: \"submit\",\n    value: \"Buy\",\n    onClick: e => handlePurchase(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }))))));\n}\n\nexport default Portfolio;","map":{"version":3,"sources":["/home/cees/code/labs/interviewProjects/stock-portfolio-app/stock-portfolio-app/src/components/Portfolio.js"],"names":["React","useState","Stock","NavBar","APIKEY","SANDBOXURL","VERSION","BASEBACKENDURL","Portfolio","props","ticker","setTicker","quantity","setQuantity","price","setPrice","validCash","setValidCash","validAmount","setValidAmount","validTicker","setValidTicker","handlePurchase","e","preventDefault","enoughCash","checkQuantity","buyStock","Number","isInteger","getLatestPrice","stock","fetch","then","response","ok","json","stockPrice","catch","error","user","cash","userInfo","email","stockInfo","transactionInfo","method","headers","body","JSON","stringify","resp","data","console","log","renderOwnedStocks","testing","i","push","convertNumToCurrencyFormat","toLocaleString","style","currency","findTicker","target","value","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Stock from './Stock';\nimport NavBar from './NavBar';\nimport '../css/portfolio.css';\nimport { APIKEY, SANDBOXURL,VERSION, BASEBACKENDURL } from '../constants'\n\nfunction Portfolio(props) {\n    const [ticker, setTicker] = useState(\"\");               // hook, ticker of stock\n    const [quantity, setQuantity] = useState(\"\");           // hook, amount of stocks\n    const [price, setPrice] = useState(\"\");                 // hook, price of stock\n    // hooks to display error messages\n    const [validCash, setValidCash] = useState(true);\n    const [validAmount, setValidAmount] = useState(true);\n    const [validTicker, setValidTicker] = useState(true);\n    \n\n    const handlePurchase = (e) => {\n        e.preventDefault();\n        if (!validTicker) {                  // check if ticker exists\n\n        }\n        else if (enoughCash()) {            // check if theres enough cash for user to make the purchase\n            setValidCash(false);\n        }\n        else if (checkQuantity()) {          // check whether the user typed in a valid amount\n            setValidAmount(false);\n        }\n        else {                               // passed the test, valid purchase\n            setValidCash(true);\n            setValidTicker(true);\n            buyStock();\n        }\n\n    }\n\n    const checkQuantity = () => {\n        return Number(quantity) < 0 || !Number.isInteger(Number(quantity))\n    }\n\n    const getLatestPrice = (stock) => {\n        fetch (SANDBOXURL + VERSION + `stock/${stock}/price?token=${APIKEY}`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n            throw response;\n        })\n        .then(stockPrice => {\n            setValidTicker(true);\n            setPrice(stockPrice);\n        })\n        .catch(error => {                            // ticker does not exit  \n            setValidTicker(false);\n        })\n    }\n\n    const enoughCash = () => {          // check if user can afford the stocks with money in wallet\n        return (price * quantity) < props.user.cash;\n    }\n\n    const buyStock = () => {\n        const userInfo = {\"email\": props.user.email};\n        const stockInfo = {\n            \"ticker\": ticker,\n            \"quantity\": quantity,\n            \"price\": price\n        }\n\n        const transactionInfo = {\n            \"ticker\": ticker,\n            \"quantity\": quantity,\n            \"status\": \"BUY\",\n            \"price\": price\n        }\n        fetch(BASEBACKENDURL + 'buy-stocks/',{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                userInfo,\n                stockInfo,\n                transactionInfo\n            })\n        })\n        .then (resp => resp.json())\n        .then (data => {\n            console.log(data);\n        })    \n    }\n\n    const renderOwnedStocks = () => {\n        let testing = [];\n        for (let i = 0; i < 10; ++i) {\n            testing.push(<Stock/>);\n        }\n        return testing;\n    }\n\n    const convertNumToCurrencyFormat = (price) => {\n        return price.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\n    }\n    const findTicker = (e) => {\n        setTicker(e.target.value)\n        getLatestPrice(ticker);\n    }\n\n    return (\n        <div>\n            { Object.keys(props.user).length !== 0 && (         // check if user is loggedIn\n                <div>\n                    <NavBar/>                \n                    <header className=\"portfolioHeader\"> Portfolio (${}) </header>\n                    <div className=\"portfolioContainer\">\n                        <div className=\"stocksContainer\">\n                            <div className=\"stocksList\">\n                                {/* {renderOwnedStocks()} */}\n                            </div>\n                        </div>\n                        <div className=\"portfolioDivider\"></div>\n                        <div className=\"purchaseContainer\">\n                            <header id=\"wallet\">Cash - {convertNumToCurrencyFormat(props.user.cash)}</header>\n                            <form className=\"purchaseForm\" >\n                                <input className=\"purchaseField\" type=\"text\" placeholder=\"Ticker\" value={ticker} onChange={e => findTicker(e)} />\n                                <input className=\"purchaseField\" type=\"text\" placeholder=\"Qty\" value={quantity} onClick={e => setValidAmount(true)} onChange={e => setQuantity(e.target.value)} />\n                                <input className=\"purchaseField\" type=\"text\" placeholder=\"Price\" value={price && quantity? convertNumToCurrencyFormat(price*quantity): \"\"} readOnly/>\n                                {!validTicker && <p className=\"purchaseErrorMessage\">{ticker} is not valid </p>}\n                                {!validAmount && <p className=\"purchaseErrorMessage\">{quantity} is not a valid amount</p>}\n                                {!validCash && <p className=\"purchaseErrorMessage\">not enough cash, {quantity} stock(s) of {ticker} cost {convertNumToCurrencyFormat(price*quantity)}</p>}\n                                \n                                <input className=\"purchaseButton\" type=\"submit\" value=\"Buy\" onClick={e => handlePurchase(e)}/>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Portfolio;"]},"metadata":{},"sourceType":"module"}